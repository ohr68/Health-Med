// <auto-generated />
using System;
using HealthMed.ORM.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HealthMed.ORM.Migrations
{
    [DbContext(typeof(HealthMedDbContext))]
    [Migration("20250413155709_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HealthMed.Domain.Entities.Administrator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Apagado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("datetime2(7)");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("datetime2(7)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Administradores", (string)null);
                });

            modelBuilder.Entity("HealthMed.Domain.Entities.Consulta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Apagado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("datetime2(7)");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("datetime2(7)");

                    b.Property<DateTime>("Horario")
                        .HasColumnType("datetime2");

                    b.Property<string>("JustificativaCancelamento")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("MedicoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PacienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("Valor")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.ToTable("Consultas", (string)null);
                });

            modelBuilder.Entity("HealthMed.Domain.Entities.DisponibilidadeMedico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Apagado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("datetime2(7)");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("datetime2(7)");

                    b.Property<Guid>("MedicoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MedicoId");

                    b.ToTable("DisponibilidadeMedico", (string)null);
                });

            modelBuilder.Entity("HealthMed.Domain.Entities.Especialidade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Apagado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("datetime2(7)");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("datetime2(7)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Nome")
                        .HasDatabaseName("IX_Especialidade_Nome");

                    b.ToTable("Especialidades", (string)null);
                });

            modelBuilder.Entity("HealthMed.Domain.Entities.Medico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Apagado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("datetime2(7)");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("datetime2(7)");

                    b.Property<Guid>("EspecialidadeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ValorConsulta")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("EspecialidadeId")
                        .HasDatabaseName("IX_Medico_EspecialidadeId");

                    b.HasIndex("Nome")
                        .HasDatabaseName("IX_Medico_Nome");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Medicos", (string)null);
                });

            modelBuilder.Entity("HealthMed.Domain.Entities.Paciente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Apagado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("datetime2(7)");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("datetime2(7)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Pacientes", (string)null);
                });

            modelBuilder.Entity("HealthMed.Domain.Entities.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Apagado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AtualizadoEm")
                        .HasColumnType("datetime2(7)");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("datetime2(7)");

                    b.Property<bool>("LoginLiberado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TipoUsuario")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Usuarios", (string)null);
                });

            modelBuilder.Entity("HealthMed.Domain.Entities.Administrator", b =>
                {
                    b.OwnsOne("HealthMed.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("AdministratorId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("Email");

                            b1.HasKey("AdministratorId");

                            b1.HasIndex("Valor")
                                .IsUnique()
                                .HasDatabaseName("IX_Administrador_Email");

                            b1.ToTable("Administradores");

                            b1.WithOwner()
                                .HasForeignKey("AdministratorId");
                        });

                    b.Navigation("Email")
                        .IsRequired();
                });

            modelBuilder.Entity("HealthMed.Domain.Entities.Consulta", b =>
                {
                    b.HasOne("HealthMed.Domain.Entities.Medico", "Medico")
                        .WithMany("Consultas")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HealthMed.Domain.Entities.Paciente", "Paciente")
                        .WithMany("Consultas")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Medico");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("HealthMed.Domain.Entities.DisponibilidadeMedico", b =>
                {
                    b.HasOne("HealthMed.Domain.Entities.Medico", "Medico")
                        .WithMany("Disponibilidade")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HealthMed.Domain.ValueObjects.Hora", "HoraFim", b1 =>
                        {
                            b1.Property<Guid>("DisponibilidadeMedicoId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Valor")
                                .HasColumnType("int")
                                .HasColumnName("HoraFim");

                            b1.HasKey("DisponibilidadeMedicoId");

                            b1.ToTable("DisponibilidadeMedico");

                            b1.WithOwner()
                                .HasForeignKey("DisponibilidadeMedicoId");
                        });

                    b.OwnsOne("HealthMed.Domain.ValueObjects.Hora", "HoraInicio", b1 =>
                        {
                            b1.Property<Guid>("DisponibilidadeMedicoId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Valor")
                                .HasColumnType("int")
                                .HasColumnName("HoraInicio");

                            b1.HasKey("DisponibilidadeMedicoId");

                            b1.ToTable("DisponibilidadeMedico");

                            b1.WithOwner()
                                .HasForeignKey("DisponibilidadeMedicoId");
                        });

                    b.OwnsOne("HealthMed.Domain.ValueObjects.DiaSemana", "DiaSemana", b1 =>
                        {
                            b1.Property<Guid>("DisponibilidadeMedicoId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Valor")
                                .HasColumnType("int")
                                .HasColumnName("DiaSemana");

                            b1.HasKey("DisponibilidadeMedicoId");

                            b1.ToTable("DisponibilidadeMedico");

                            b1.WithOwner()
                                .HasForeignKey("DisponibilidadeMedicoId");
                        });

                    b.Navigation("DiaSemana")
                        .IsRequired();

                    b.Navigation("HoraFim")
                        .IsRequired();

                    b.Navigation("HoraInicio")
                        .IsRequired();

                    b.Navigation("Medico");
                });

            modelBuilder.Entity("HealthMed.Domain.Entities.Medico", b =>
                {
                    b.HasOne("HealthMed.Domain.Entities.Especialidade", "Especialidade")
                        .WithMany("Medicos")
                        .HasForeignKey("EspecialidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthMed.Domain.Entities.Usuario", "Usuario")
                        .WithMany("Medicos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HealthMed.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("MedicoId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("Email");

                            b1.HasKey("MedicoId");

                            b1.HasIndex("Valor")
                                .IsUnique()
                                .HasDatabaseName("IX_Medico_Email");

                            b1.ToTable("Medicos");

                            b1.WithOwner()
                                .HasForeignKey("MedicoId");
                        });

                    b.OwnsOne("HealthMed.Domain.ValueObjects.Crm", "Crm", b1 =>
                        {
                            b1.Property<Guid>("MedicoId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Crm");

                            b1.HasKey("MedicoId");

                            b1.HasIndex("Valor")
                                .IsUnique()
                                .HasDatabaseName("IX_Medico_Crm");

                            b1.ToTable("Medicos");

                            b1.WithOwner()
                                .HasForeignKey("MedicoId");
                        });

                    b.Navigation("Crm")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Especialidade");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("HealthMed.Domain.Entities.Paciente", b =>
                {
                    b.HasOne("HealthMed.Domain.Entities.Usuario", "Usuario")
                        .WithMany("Pacientes")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HealthMed.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("PacienteId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("Email");

                            b1.HasKey("PacienteId");

                            b1.HasIndex("Valor")
                                .IsUnique()
                                .HasDatabaseName("IX_Paciente_Email");

                            b1.ToTable("Pacientes");

                            b1.WithOwner()
                                .HasForeignKey("PacienteId");
                        });

                    b.OwnsOne("HealthMed.Domain.ValueObjects.Cpf", "Cpf", b1 =>
                        {
                            b1.Property<Guid>("PacienteId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("nvarchar(11)")
                                .HasColumnName("Cpf");

                            b1.HasKey("PacienteId");

                            b1.HasIndex("Valor")
                                .IsUnique()
                                .HasDatabaseName("IX_Paciente_Cpf");

                            b1.ToTable("Pacientes");

                            b1.WithOwner()
                                .HasForeignKey("PacienteId");
                        });

                    b.Navigation("Cpf")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("HealthMed.Domain.Entities.Especialidade", b =>
                {
                    b.Navigation("Medicos");
                });

            modelBuilder.Entity("HealthMed.Domain.Entities.Medico", b =>
                {
                    b.Navigation("Consultas");

                    b.Navigation("Disponibilidade");
                });

            modelBuilder.Entity("HealthMed.Domain.Entities.Paciente", b =>
                {
                    b.Navigation("Consultas");
                });

            modelBuilder.Entity("HealthMed.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("Medicos");

                    b.Navigation("Pacientes");
                });
#pragma warning restore 612, 618
        }
    }
}
